#lang ivy1.7

module ring_topology(carrier) = {

    relation btw(X:carrier,Y:carrier, Z:carrier) # Y is on the acyclic path from X to Z

    # Axiom defining the btw relation - note it's not reflexive
    # not needed: axiom btw(X,Y,Z) -> X ~= Y & X ~= Z & Y ~= Z  # anti-reflexive
    axiom btw(W,X,Y) & btw(W,Y,Z) -> btw(W,X,Z)  # transitive
    axiom btw(W,X,Y) -> ~btw(W,Y,X)  # acyclic
    axiom btw(W,X,Y) | btw(W,Y,X) | W=X | W=Y | X=Y  # total
    axiom btw(X,Y,Z) -> btw(Y,Z,X)  # cyclic permutations

    action get_next(x:carrier) returns (y:carrier) = {
        assume x ~= y & ((Z ~= x & Z ~= y) -> btw(x,y,Z))
    }

    action get_prev(y:carrier) returns (x:carrier) = {
        assume y ~= x & ((Z ~= y & Z ~= x) -> btw(y,x,Z))
    }

}

type node
type value
type pcstate

instantiate ring : ring_topology(node)

relation x(N:node, V:value)
function y(N:node) : value

individual zero: value
individual one: value
axiom zero ~= one

function pc(N:node) : pcstate
individual a1: pcstate
individual a2: pcstate
individual b: pcstate
individual done: pcstate
axiom (a1 ~= a2) & (a1 ~= b) & (a1 ~= done) & (a2 ~= b) & (a2 ~= done) & (b ~= done)
#axiom forall P:pcstate. (P = a1) | (P = a2) | (P = b) | (P = done)

after init {
	x(N, V) := (V = zero);
	y(N) := zero;
	pc(N) := a1;
}

action step_a1(self:node) = {
	require (pc(self) = a1);
	x(self, V) := (V = zero | V = one);
	pc(self) := a2;
}

action step_a2(self:node) = {
	require (pc(self) = a2);
	x(self, V) := (V = one);
	pc(self) := b;
}

action step_b(self:node, v:value) = {
	require (pc(self) = b);
	require x(ring.get_prev(self), v);
	y(self) := v;
	pc(self) := done;
}

export step_a1
export step_a2
export step_b

invariant [safety] (forall S:node. pc(S) = done) -> (exists I:node. y(I) = one)

#invariant [manual_1] forall I:node, V:value. x(I, V) -> (V = zero | V = one)
#invariant [manual_2] forall I:node. (y(I) = zero) | (y(I) = one)
#invariant [manual_3] forall I:node. (pc(I) = a1) | (pc(I) = a2) | (pc(I) = b) | (pc(I) = done)
#invariant [manual_4] forall I:node. (pc(I) = b | pc(I) = done) -> x(I, one)
#invariant [manual_5] (exists I:node. pc(I) ~= done) | (exists I:node. y(I) = one)

#invariant [manual_ic3po6]	(forall N0 . ((pc(N0) = a1) | x(N0, one)))
#invariant [manual_ic3po7]	(forall N0 . ((pc(N0) = done) -> ~x(N0, zero)))
#invariant [manual_ic3po8]	(forall V0, N0 . (((pc(N0) = b) & x(N0, V0)) -> (V0 = one)))
