#lang ivy1.7

# Source: https://github.com/sat-group/cfg-enum/blob/permissive/benchmarks/simple-de-lock.ivy

type node

relation message(Src: node, Dst: node)
relation has_lock(N: node)

individual start_node: node

after init {
	message(Src, Dst) := false;
	has_lock(X) := X = start_node;
}

action send(src: node, dst: node) = {
    assume has_lock(src);
    message(src, dst) := true;
    has_lock(src) := false;
}

action recv(src: node, dst: node) = {
    assume message(src, dst);
    message(src, dst) := false;
    has_lock(dst) := true;
}

export send
export recv

invariant X ~= Y -> ~(has_lock(X) & has_lock(Y))

#invariant [manual_1] ~(has_lock(X) & message(Y,Z))
#invariant [manual_2] ~message(X,Y) | ~message(Z,W) | X=Z
#invariant [manual_3] ~message(X,Y) | ~message(Z,W) | Y=W
#invariant [manual_4] forall A, B, C, D . ((((A) = (B)) & ((C) = (D))) | ((~(has_lock(A))) & (~(message(A, C)))) | (~(message(B, D))))
